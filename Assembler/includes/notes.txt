LE1 ISA V0.0
21/11/08
Dave Stevens

Files:
ass.pl
firstpass.pl
secondpass.pl
opcodes.txt
--------------------------------------------------------------------------------

Files usage:

ass.pl - The main assembler, it will take files in and output the .bin file (which isn't actually a binary file but will be in the end). Runs firstpass.pl and then secondpass.pl in sequence. There are a two flags which can be used:
-i : this flag leaves the intermediate file <inputfile>.temp.s
-m : this flag displays information about what the assembler is doing

firstpass.pl - Runs through the <inputfile> and outputs a file (<inputfile>.temp.s) in a directory (<inputfile>).

secondpass.pl - Runs through <inputfile>.temp.s and outputs a file (<inputfile>.s.bin) in the directory (<inputfile>).

--------------------------------------------------------------------------------

21/11/08
So far the assembler works on the instructions given. The instrucions which are not supported are:
SXTB, SXTH, ZXTH, ZXTB, MOV, MTB, ANDL, SLCT, SLCTF, GOTO, IGOTO*, CALL, ICALL*, BR, BRF, RETURN, RFI, XNOP, STOP, NOP, SEND, RECV.
(* these are old VEX instructions and no longer supported, might be worth supporting them?).

For instructions which are not supported the assembler will just output x x 32.

The output file <inputfile>.s.bin at the moment is just in the order which the instructions are read in, the binary representation is outputted followed by the original instruction.

The firstpass and second pass still need work, the labeling system and calls to functions are not supported fully. I need to work on the first pass again to go through and get all the labels and data. The small .s file I was originally working with did not include all different types of data.

I have since run the paraffins.s file through the assembler and there are calls to functions within the code which I have not stored the addresses of and also some of the data is not stored.

I also noticed that there are some numbers

--------------------------------------------------------------------------------

I have included the paraffins.s file and the output from running the assembler on it.

###

The instuctions for running assmebler on the paraffins.s file:
>$ perl ass.pl -i -m paraffins.s

You should see the following with the -m flag:
Filename = paraffins.s
Running first pass on paraffins.s
First Pass Completed
paraffins/paraffins.temp.s contains data needed for second pass
Running second pass on paraffins.temp.s
Second Pass Completed
paraffins/paraffins.s.bin created
All done :)
>$

Then in the paraffins/ directory there should be a paraffins.s.bin and paraffins.temp.s file.

###

To run the firstpass separately:
>$ perl firstpass.pl paraffins.s

You should see the following output:
First Pass Completed
paraffins/paraffins.temp.s contains data needed for second pass

In the paraffins/ directory there will be the paraffins.temp.s file.

###

To run the secondpass separately:
>$ perl secondpass.pl paraffins/paraffins.temp.s

You should see the following output:
Second Pass Completed
paraffins/paraffins.s.bin created
>$

In the paraffins/ directory there will be the paraffins.s.bin file.

###




######## notes added 05/01/09

firstpass - test.pl
midpass - midpass.pl
secondpass - secondpass.pl

need to write a script to go from start to finish

needs to take in multiple files and output a single instruction binary and a single data binary

firstpass, just run it on each of the .s files
midpass, need to then run if more than 1 input file
second pass, to run on the output of the firstpass if only 1 file, else run on the output of the midpass


assem.pl is the starttofinish thingy


##################
notes added 13/01/09

firstpass - test.pl
midpass - midpass.pl
secondpass - test2.pl

assem.pl is a script which will run through whole process (need to possibly allow it to only run certain aspects)

midpass is used when there is more that 1 input file, it will find main and put this at the top of instruction space then put the other files in any order
assem takes the following arguments:

Usage: assem.pl <directory> -d -k -h --help -oOUTPUT

<directory> - This will search the directory for assembly files
-d          - Debug, shows extra information
-k          - Keep temporary files
-h (--help) - Show this help
-oOUTPUT    - When running on multiple files you need to specify an output file/directory

it will fall out if an output file is not specified and there is more than one input file

##################
